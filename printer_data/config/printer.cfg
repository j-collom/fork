#[include shell_command.cfg]
[include fluidd.cfg]
#[include macros.cfg]
#####################################################################
## For KAMP (klipper Adaptive Bed Leveling - and purging)
#####################################################################
#[include KAMP_Settings.cfg]
#[include stealthburner_leds] #### Stealthburner LED routines ####

[virtual_sdcard]
path:/home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

#####################################################################
##  Thermistor Definition                                          ##
#####################################################################


[thermistor ATC Semitec 104NT-4-R025H42G]
temperature1: 25
resistance1: 100000
temperature2: 160
resistance2: 1074
temperature3: 300
resistance3: 82.78

#[thermistor ATC Semitec 104GT-2]
#temperature1: 20
#resistance1: 126800
#temperature2: 150
#resistance2: 1360
#temperature3: 300
#resistance3: 80.65


#####################################################################
#MCU's
#####################################################################
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_23001A000B51313236343430-if00

[mcu can0]
canbus_uuid: cdb8b414e1c7
## Obtain by "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py" can0 ##
## troubleshooting CANbus "ip -s link show can0" shows traffic, "lsusb" shows usb connected 


#####################################################################
## Exclude list for Adaptive Bed Mesh and Purge
#####################################################################
[exclude_object]

#####################################################################
## Basic Printer definitions
#####################################################################[printer]

[printer]
kinematics: corexy
max_velocity: 200
max_accel: 2000
max_z_velocity: 15
max_z_accel: 300
square_corner_velocity: 6.0

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_0
##  Virtual Endstop
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200  #set to 200 for 1.8 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 160
position_min: 0
position_max: 160
homing_speed: 40
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC4
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG6
driver_SGTHRS: 125


##  A Stepper - Right
##  Connected to MOTOR_1
##  Virtual Endstop
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation: 200  #set to 200 for 1.8 degree stepper
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 160
position_min: 0
position_max: 160
homing_speed: 40  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PD11
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9
driver_SGTHRS: 125

#####################################################################
#   Z Stepper Settings
#####################################################################

##  Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Virtual Endstop
[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
rotation_distance: 8    # Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
microsteps: 32
#full_steps_per_rotation: 200
endstop_pin: ^PF5
position_endstop: 120
position_min: -1.5
position_max: 150
homing_speed: 7.5 # Leadscrews are slower than 2.4, 10 is a recommended max. Jan 30th moved from 8 to 10
second_homing_speed: 3
homing_retract_dist: 3 
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: False
run_current: 0.37
sense_resistor: 0.110
stealthchop_threshold: 0
driver_SGTHRS: 45

[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 8  # Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
microsteps: 32
#full_steps_per_rotation: 200
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: False
run_current: 0.37
sense_resistor: 0.110
stealthchop_threshold: 0

##  Z2 Stepper - Front Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: !PF10
enable_pin: !PG2
rotation_distance: 8  # Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
microsteps: 32
#full_steps_per_rotation: 200
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: False
run_current: 0.37
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
##   BOARD PINS - defines pin aliases on Octopus for config usage.   ##
#####################################################################
[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5a
   
#####################################################################
##   BOARD PINS - defines pin aliases on EBB36 for config usage.   ##
#####################################################################

[board_pins EBB36_G0B1_v1.2] 
mcu: can0
aliases:
aliases_step:
    EXT_EN=PD2,EXT_STEP=PD0,EXT_DIR=PD1,EXT_UART=PA15
aliases_TAP: # these are preferred for endstops (including klicky)
    TAP_3=PB7,TAP_2=PB5,TAP_1=PB6
aliases_bltouch: # these are the dupont connectors for bltouch
    PROBE_1=PB9,PROBE_2=PB8
aliases_fans:
    FAN0=PA1,FAN1=PA0
aliases_thermistors:
    TH0=PA3,PT100_CS=PA4,PT100_SCLK=PA5,PT100_MISO=PA6,PT100_MOSI=PA7
aliases_heaters:
    HE0=PB13
aliases_rgb:
    RGBLED=PD3
aliases_adxl:
    ADXL_CS=PB12,ADXL_SCLK=PB10,ADXL_MISO=PB2,ADXL_MOSI=PB11
aliases_i2c:
    AUX0=PB3,AUX1=PB4

#####################################################################
## Define ADXL345 for input shaping                                ##
#####################################################################

#[adxl345]
#cs_pin: can0:ADXL_CS
#spi_software_sclk_pin: can0:ADXL_SCLK
#spi_software_mosi_pin: can0:ADXL_MOSI
#spi_software_miso_pin: can0:ADXL_MISO
#axes_map: x,y,z

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    150,150,20 

#####################################################################
#   Extruder
#####################################################################
[extruder]
step_pin: can0:EXT_STEP
dir_pin: !can0:EXT_DIR  
enable_pin: !can0:EXT_EN
microsteps: 16
full_steps_per_rotation: 200 #1.8deg Motor
rotation_distance: 4.637
nozzle_diameter: 0.40
filament_diameter: 1.750
#pressure_advance     
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 120
max_extrude_only_accel: 5500
max_extrude_cross_section: 1.4
min_extrude_temp: 10
heater_pin: can0:HE0
sensor_pin: can0:TH0
sensor_type: PT1000 
min_temp: 10
max_temp: 350

control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114

## EXTRUDER MOTOR
[tmc2209 extruder]
uart_pin: can0:EXT_UART
interpolate: true
sense_resistor: 0.11
stealthchop_threshold: 0
run_current: 0.30

[verify_heater extruder]

max_error:  140

#####################################################################
##   Firmware Retract                                              ##
#####################################################################

[firmware_retraction]
retract_length: 2
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 40
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0.2
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 20
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

#####################################################################
##   Bed                                                           ##
#####################################################################
[heater_bed]
##  SSR Pin - HE1
##  Thermistor - TB
heater_pin: BED_OUT
## See https://www.klipper3d.org/Config_Reference.html#common-thermistors for thermistor types. ##
sensor_type: Generic 3950  #Trianglelab-NTC100K-B3950  ##ATC Semitec 104NT-4-R025H42G
sensor_pin: PF3
max_power: 1
min_temp: 1
max_temp: 120

control = pid
pid_kp = 20
pid_ki = 1
pid_kd = 350

[verify_heater heater_bed]
max_error: 150
check_gain_time: 120

[bed_mesh]
speed: 250
horizontal_move_z: 5
mesh_min: 10, 10
mesh_max: 150,150
#fade_start: 1
#fade_end: 10.0
#probe_count: 5,5 # Values should be odd, so one point is directly at bed center
#algorithm: bicubic
#mesh_pps: 2, 3
#bicubic_tension: 0.2

#####################################################################
##   Fan Control                                                   ##
#####################################################################
#[fan]
##  Print Cooling Fan 
pin: can0:FAN1
kick_start_time: 0.25
cycle_time: 0.15
off_below: 0.10

#[heater_fan hotend_fan]
##  Hotend Fan
pin: can0:FAN0
max_power: 1.0
kick_start_time: 0.5
fan_speed: 0.6
heater: extruder
heater_temp: 60.0
##  If you are experiencing back flow, you can reduce fan_speed


##ELECTRONICS BAY FANS##
[fan_generic controller_fan]
##  Controller fan - FAN2
pin: PD12
kick_start_time: 0.5
max_power: 1.0
off_below: 0.0
cycle_time: 0.010


[gcode_macro M141]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}

#[gcode_macro M106]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#    SET_FAN_SPEED FAN={fan} SPEED={speed}
#
#[temperature_fan RaspberryPi]
#sensor_type: temperature_host #This is what the Pi's Temperature sensor is known as.
#pin: host:gpiochip1/gpio14 #PD15   #Set this to your fan pin
#max_temp: 80.0                #Set below 85C, Pi3+ MCU can be damaged at 85C
#target_temp: 45.0             #Set this to your preferred running temperature
#min_temp: 10
#shutdown_speed: 0.0
#kick_start_time: 0.5
#off_below: 0.19
#max_speed: 1.0
#min_speed: 0.0
#control: pid
#pid_Kp: 2.0
#pid_Ki: 5.0
#pid_Kd: 0.5
#pid_deriv_time: 2.0

[gcode_arcs]
resolution: 1.0


#####################################################################
##   LED Controls                                                  ##
#####################################################################
#[neopixel headlight]
## Stealthburner lighting - RGB_LED
#pin: can0:RGBLED
#chain_count: 3
#color_order: RGB
#initial_RED: 0.069
#initial_GREEN: 0.078
#initial_BLUE: 0.11
#initial_WHITE: 0.0



####################################################################
## TEMPERATURE CONFIGURATIONS
####################################################################
[temperature_sensor RaspberryPi]
sensor_type: temperature_host

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu

[temperature_sensor EBB36]
sensor_type: temperature_mcu
sensor_mcu: can0
min_temp: 15
max_temp: 100

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: PF4
min_temp: 15
max_temp: 100
gcode_id: chamber_th

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################
[gcode_macro HOME]
gcode:
    G90
    # Home Z
    G1 X80 Y80
    G28 Z0
    G1 Z10 F1200
    # Home Y
    G28 Y0
    G1 Y5 F1200
    # Home X
    G4 P200
    G28 X0
    G1 X5 F1200
#___________________________________________

[idle_timeout]
timeout: 1800
#####################################################################
##  Homing
#####################################################################
[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position: 60 ,60
speed:100
z_hop:10
#####################################################################
##  Leveling
#####################################################################
[z_tilt]
##  Use Z_TILT_ADJUST to level the bed .
##  z_positions: Location of toolhead
z_positions:
     -50, -13
     80, 197
     197, -13
points:
    20, 10
    80, 135
    140, 10

speed: 200
horizontal_move_z: 20
retries: 5
retry_tolerance: 0.0075

[skew_correction]

#####################################################################
#   Macros
#####################################################################

    [gcode_macro ATTACH_PROBE]
    gcode:
          {% set F = 4000 %}   
          SAVE_GCODE_STATE NAME=attach_probe_state
          T1
          G90
          G0 Z14
          G0 Y60 F{F}
          G0 X60 Y60 F{F}
          G0 X-36 Y100 F{F}
          G0 Y118.5 F{F}
          G0 X-16 F{F}
          G0 X60 Y60 F{F}
          RESTORE_GCODE_STATE NAME=attach_probe_state

    [gcode_macro DETACH_PROBE]
    gcode:
          {% set F = 4000 %}
          SAVE_GCODE_STATE NAME=detach_probe_state
          T1
          G90
          G0 Z14
          G0 Y60 F{F}
          G0 X60 Y60 F{F}
          G0 X-16 Y118.5 F{F}
          G0 X-36 F{F}
          G0 Y100 F{F} F{F}
          G0 X60 Y60 F{F}
          RESTORE_GCODE_STATE NAME=detach_probe_state

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set allow_park = client.park_at_cancel | default(false) | lower == 'true' %}
  {% set retract = client.cancel_retract | default(5.0) | abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x | default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y | default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x | length > 0 or park_y | length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro | default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
#________________________________________________________________________
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set idle_timeout = client.idle_timeout | default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE | default(1) | int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro | default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
#________________________________________________________________________
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move | default(velocity) %}
  {% set runout_resume = True if client.runout_sensor | default("") == ""   # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state | upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %}
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro | default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY | default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %}
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0 | 1]] [MACRO=<name>]
#________________________________________________________________________
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1)|int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0 | 1]] [LAYER=<number>] [MACRO=<name>]
#________________________________________________________________________
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
#________________________________________________________________________
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER | int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
#________________________________________________________________________
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos | default(false) | lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x | default(0.0) %}
  {% set custom_park_y  = client.custom_park_y | default(0.0) %}
  {% set park_dz        = client.custom_park_dz | default(2.0) | abs %}
  {% set sp_hop         = client.speed_hop | default(15) * 60 %}
  {% set sp_move        = client.speed_move | default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z | default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN | default(0) | float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)] | min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
#________________________________________________________________________
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set use_fw_retract = (client.use_fw_retract | default(false) | lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH | default(client.unretract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_unretract) | default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed | float | abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
  {% set length = params.LENGTH | default(client.retract) | default(1.0) | float %}
  {% set speed = params.SPEED | default(client.speed_retract) | default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length | float | abs} SPEED={speed | float | abs}

#####################################################################
##  G-Code Logging to console
#####################################################################
[respond]
default_type: echo
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
#default_prefix: echo:
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".
[pause_resume]

######################################################################
# Filament Change - M600
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

#[gcode_macro M600]
#gcode:
    #{% set X = params.X|default(150)|float %}
    #{% set Y = params.Y|default(0)|float %}
    #{% set Z = params.Z|default(15)|float %}

    #{% set X = 290|float %}
    #{% set Y = 290|float %}
    #{% set Z = 40|float %}
    #SAVE_GCODE_STATE NAME=M600_state
    #PAUSE
    #G91
    #G1 E-.8 F2700
    #G1 Z{Z}
    #G90
    #G1 X{X} Y{Y} F3000
    #G91
    #G1 E-75 F1000
    #RESTORE_GCODE_STATE NAME=M600_state

######################################################################
## Multi Material Macros
######################################################################



#####################################################################
##  Nozzle scrubber macro
#####################################################################
[gcode_macro BRUSH_NOZZLE]
# heat nozzle for best results
variable_x1: 185 # left of brush   <<<edit this value>>>
variable_x2: 250 # right or brush  <<<edit this value>>>
variable_y1: 300 # y value         <<<edit this value>>>
variable_z1: 5 # nozzle height   <<<edit this value>>>
gcode:
    M400  ;wait for buffer to clear
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28         ;home axes before travel moves
    {% endif %}

    G90
    G0 Z5 F3600     ;ensure nozzle is above endstop pin
    G0 X{x1} Y{y1}  ;left position
    G0 Z{z1}        ;move down, ready for brushing
    
    M117 Brushing Nozzle
    G0 X{x2} F5000  ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 X{x2}        ;move right
    G0 X{x1}        ;move left
    G0 Z5 F3600     ;raise nozzle when done
    M117 Nozzle Cleaned
#####################################################################
##  print_start macro
#####################################################################
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G28  XY                 # Full home (XYZ)
  G0 X80 Y80
  G28  Z
  G0 Z30
  G90                   # Absolut position

  ##  First Bed Mesh
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
#    M106 S255                                           # Turns on the PT-fan

    ##  Nevermore startup
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Soak for 2min"                # Displays info
    #G4 P120000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE                 # Starts bed mesh
  #Smart_Park                                                    # Activates KAMP's Smart Park function
  # Heat nozzle up to target temp
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  BRUSH_NOZZLE
  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Begin printing"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  VORON_PURGE
  #G1 X100 E20 F1000                                # Purge line 
  G92 E0                                            # Absolut position
  #SKEW_PROFILE LOAD=PLA
  #SKEW_PROFILE LOAD=calilantern_skew_profile
  M503
##
##Moved BED_MESH_CALIBRATE to unused Macros##
[gcode_macro SENSOR_HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
#_________________________________________________________________

[gcode_macro SENSOR_HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
#__________________________________________________________________

[gcode_macro SENSOR_HOME_Z]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set RUN_CURRENT_Z = printer.configfile.settings['tmc2209 stepper_z'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={HOME_CURRENT}

    # Home
    G28 Z
    # Move away
    G91
    G1 Z-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Z}
#__________________________________________________________________

[gcode_macro SHUTDOWN]
gcode:
  {action_call_remote_method("shutdown_machine")}
#__________________________________________________________________
[gcode_macro REBOOT]
gcode:
  {action_call_remote_method("reboot_machine")}
#________________________________________________________________

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
#________________________________________________________________

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}
#________________________________________________________________

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  #_______________________________________________________________

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

 #   #SET_SKEW CLEAR=1
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3 F3600                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    #Smart_Park
    G0 X290 Y290
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
#_______________________________________________________________

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    #M300 # beep
    G91
    G92 E0
    G1 E350 F{max_velocity} # fast-load
    G1 E25 F{speed} # purge
    #M300
    #M300
    RESTORE_GCODE_STATE NAME=load_state
#____________________________________________________________

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    #M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-420 F{max_velocity} # fast-unload
    #M300
    #M300
    RESTORE_GCODE_STATE NAME=unload_state




